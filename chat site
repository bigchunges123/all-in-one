

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Chatroom *Made by sam</title>


  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f3f7fc;
      color: #2c3e50;
      margin: 0;
      padding: 0;
      text-align: center;
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    button {
      padding: 12px 24px;
      font-size: 1rem;
      margin: 10px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      background-color: #3498db;
      color: white;
      transition: background-color 0.3s ease;
    }

    button:hover {
      background-color: #2980b9;
    }

    .dark-mode {
      background-color: #2c3e50;
      color: #ecf0f1;
    }

    .dark-mode button {
      background-color: #2980b9;
    }

    .dark-mode button:hover {
      background-color: #3498db;
    }

    .form-container {
      margin-top: 50px;
    }

    .login-input {
      padding: 10px;
      margin: 10px;
      border-radius: 8px;
      border: 1px solid #ccc;
      width: 300px;
      font-size: 1rem;
    }

    #login-container {
      text-align: center;
    }

    .login-message {
      font-size: 1.2rem;
      color: #e74c3c;
    }

    #chat-container {
      width: 80%;
      margin: auto;
      text-align: left;
      padding-top: 20px;
    }

    #chat-box {
      border: 1px solid #ccc;
      height: 300px;
      overflow-y: scroll;
      padding: 10px;
      margin-bottom: 10px;
    }

    .message {
      margin: 10px 0;
    }

    .message .sender {
      font-weight: bold;
      color: #3498db;
    }

    .message span {
      color: #2c3e50;
    }

    #chat-input-container {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    #chat-input-container input {
      width: 80%;
      padding: 10px;
      border-radius: 8px;
      border: 1px solid #ccc;
      font-size: 1rem;
    }

    #chat-input-container button {
      width: 15%;
    }

    .chat-code-container {
      display: none;
    }

    .login-form-container {
      display: block;
    }

    .username-input-container {
      margin: 20px 0;
    }

    .username-input-container input {
      width: 250px;
      padding: 8px;
      border-radius: 8px;
      font-size: 1rem;
    }

    .error-message {
      color: #e74c3c;
      font-size: 1rem;
      margin-top: 10px;
    }

    /* Contact and theme switcher button styles */
    .top-bar {
      display: flex;
      justify-content: space-between;
      padding: 10px;
      background-color: #3498db;
      color: white;
    }

    .top-bar button {
      background-color: #3498db;
      color: white;
      border: none;
      font-size: 1rem;
      padding: 10px;
      cursor: pointer;
    }

    .top-bar button:hover {
      background-color: #2980b9;
    }
  </style>
</head>
<body>

  <!-- Top Bar with Contact and Theme Switcher -->
  <div class="top-bar">
    <button onclick="toggleContact()">Contact</button>
    <button onclick="toggleTheme()">üåô Toggle Theme</button>
    <button id="closeAndOpenBtn">Teacher!</button>
  </div>
<h2>
  <pre style="font-family: 'Courier New', monospace; white-space: pre-wrap; word-wrap: break-word; font-size: 8px;">
    __       __            __                                                      __                       ______   __                    __              _______                                    
/  |  _  /  |          /  |                                                    /  |                     /      \ /  |                  /  |            /       \                                   
$$ | / \ $$ |  ______  $$ |  _______   ______   _____  ____    ______         _$$ |_     ______        /$$$$$$  |$$ |____    ______   _$$ |_           $$$$$$$  |  ______    ______   _____  ____  
$$ |/$  \$$ | /      \ $$ | /       | /      \ /     \/    \  /      \       / $$   |   /      \       $$ |  $$/ $$      \  /      \ / $$   |   ______ $$ |__$$ | /      \  /      \ /     \/    \ 
$$ /$$$  $$ |/$$$$$$  |$$ |/$$$$$$$/ /$$$$$$  |$$$$$$ $$$$  |/$$$$$$  |      $$$$$$/   /$$$$$$  |      $$ |      $$$$$$$  | $$$$$$  |$$$$$$/   /      |$$    $$< /$$$$$$  |/$$$$$$  |$$$$$$ $$$$  |
$$ $$/$$ $$ |$$    $$ |$$ |$$ |      $$ |  $$ |$$ | $$ | $$ |$$    $$ |        $$ | __ $$ |  $$ |      $$ |   __ $$ |  $$ | /    $$ |  $$ | __ $$$$$$/ $$$$$$$  |$$ |  $$ |$$ |  $$ |$$ | $$ | $$ |
$$$$/  $$$$ |$$$$$$$$/ $$ |$$ \_____ $$ \__$$ |$$ | $$ | $$ |$$$$$$$$/         $$ |/  |$$ \__$$ |      $$ \__/  |$$ |  $$ |/$$$$$$$ |  $$ |/  |        $$ |  $$ |$$ \__$$ |$$ \__$$ |$$ | $$ | $$ |
$$$/    $$$ |$$       |$$ |$$       |$$    $$/ $$ | $$ | $$ |$$       |        $$  $$/ $$    $$/       $$    $$/ $$ |  $$ |$$    $$ |  $$  $$/         $$ |  $$ |$$    $$/ $$    $$/ $$ | $$ | $$ |
$$/      $$/  $$$$$$$/ $$/  $$$$$$$/  $$$$$$/  $$/  $$/  $$/  $$$$$$$/          $$$$/   $$$$$$/         $$$$$$/  $$/   $$/  $$$$$$$/    $$$$/          $$/   $$/  $$$$$$/   $$$$$$/  $$/  $$/  $$/ 
  </pre>
</h2>
<h3 style="font-size: 0.8rem;">Made by sam massfeller</h3>
  <div id="login-container">
    <!-- Login/Signup Form -->
    <div class="login-form-container">
      <h3>Login or Signup</h3>
      <input id="email" class="login-input" type="email" placeholder="Enter your email" />
      <input id="password" class="login-input" type="password" placeholder="Enter your password" />
      <button onclick="login()">Login</button>
      <button onclick="signup()">Signup</button>
      <p id="login-message" class="login-message"></p>
    </div>


<script>
    document.getElementById("closeAndOpenBtn").addEventListener("click", function() {
        // Close the current tab
        window.close();
        
        // Open the new URL in a new tab
        window.open('https://clever.com', '_blank');
    });

    // Event listener for backtick key (` `)
    document.addEventListener("keydown", function(event) {
        if (event.key === "`") {
            // Close the current tab
            window.close();
            
            // Open the new URL in a new tab
            window.open('https://clever.com', '_blank');
        }
    });
</script>




    <!-- Username Input -->
    <div class="username-input-container" id="username-input-container" style="display:none;">
      <h3>Enter a Username</h3>
      <input type="text" id="username" placeholder="Enter your username" />
      <button onclick="setUsername()">Set Username</button>
    </div>
  </div>

  <div id="chat-code-container" class="chat-code-container">
    <!-- Create/Join Chat -->
    <h3>Create or Join a Chat</h3>
    <input type="text" id="chatCode" placeholder="Enter chat code" />
    <button onclick="joinChat()">üéÆ Join Chat</button>
    <button onclick="createChat()">üìù Create public Chat</button>

    <h3>Public Chats</h3>
    <div id="public-chats"></div>
    <div id="loading" class="loading">Loading chats...</div>
    <div id="error-message" class="error" style="display: none;">Something went wrong. Please try again later.</div>
  </div>

  <!-- Chat Room -->
  <div id="chat-container" style="display: none;">
    <div id="chat-room-title">Chat Room: <span id="chatRoom"></span></div>
    <div id="chat-box"></div>
    <div id="chat-input-container">
      <input type="text" id="message-input" placeholder="Type a message üìù" />
      <button onclick="sendMessage()">üí¨ Send</button>
    </div>
    <button onclick="leaveChat()">üö™ Leave Chat</button>
  </div>

  <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore-compat.js"></script>

  <script>
    // Initialize Firebase
    const firebaseConfig = {
      apiKey: "AIzaSyBFJ92VdvmmzEOrWYDaDMKHLUMsQ5Dqavg",
      authDomain: "sam-schatserver.firebaseapp.com",
      projectId: "sam-schatserver",
      storageBucket: "sam-schatserver.firebasestorage.app",
      messagingSenderId: "216995031440",
      appId: "1:216995031440:web:e7703b87727bdf0d5e6b15"
    };
    firebase.initializeApp(firebaseConfig);
    const db = firebase.firestore();
    const auth = firebase.auth();

    let userName = "";
    let currentChatCode = "";
    let isDarkMode = false;

    // Toggle Contact info display
    function toggleContact() {
      alert("Contact us at: sam.massfeller@icloud.com");
    }

    // Toggle Theme (Dark/Light Mode)
    function toggleTheme() {
      isDarkMode = !isDarkMode;
      if (isDarkMode) {
        document.body.classList.add('dark-mode');
      } else {
        document.body.classList.remove('dark-mode');
      }
    }

    // Handle Login
    function login() {
      const email = document.getElementById("email").value;
      const password = document.getElementById("password").value;

      auth.signInWithEmailAndPassword(email, password)
        .then(() => {
          document.querySelector('.login-form-container').style.display = "none";
          document.getElementById("username-input-container").style.display = "block";
        })
        .catch((error) => {
          document.getElementById("login-message").textContent = error.message;
        });
    }

    // Handle Signup
    function signup() {
      const email = document.getElementById("email").value;
      const password = document.getElementById("password").value;

      auth.createUserWithEmailAndPassword(email, password)
        .then(() => {
          document.querySelector('.login-form-container').style.display = "none";
          document.getElementById("username-input-container").style.display = "block";
        })
        .catch((error) => {
          document.getElementById("login-message").textContent = error.message;
        });
    }

    // Set Username
    function setUsername() {
      userName = document.getElementById("username").value.trim();
      if (userName === "") {
        alert("Username cannot be empty!");
        return;
      }
      document.getElementById("username-input-container").style.display = "none";
      document.getElementById("chat-code-container").style.display = "block";
      loadPublicChats();
    }

    // Create Chat
    function createChat() {
      const chatCode = prompt("Enter a name for your chat (e.g., 'Cool Chat')");
      if (!chatCode) return;
      db.collection("chats").doc(chatCode).set({ owner: userName })
        .then(() => {
          joinChat(chatCode);
        })
        .catch((error) => {
          document.getElementById("error-message").style.display = "block";
        });
    }

    // Join Chat
    function joinChat(code = null) {
      const chatCode = code || document.getElementById("chatCode").value.trim();
      if (chatCode === "") {
        alert("Enter a valid chat code!");
        return;
      }
      currentChatCode = chatCode;
      document.getElementById("chatRoom").textContent = chatCode;
      document.getElementById("chat-code-container").style.display = "none";
      document.getElementById("chat-container").style.display = "block";
      loadMessages(chatCode);
    }

    // Load Messages
    function loadMessages(chatCode) {
      db.collection("chats").doc(chatCode).collection("messages")
        .orderBy("timestamp")
        .onSnapshot(snapshot => {
          let chatHtml = "";
          snapshot.forEach(doc => {
            const data = doc.data();
            chatHtml += 
              `<div class="message">
                <span class="sender">${data.sender}</span>: <span>${data.text}</span>
              </div>`;
          });
          document.getElementById("chat-box").innerHTML = chatHtml;
        });
    }

    // Send Message
    function sendMessage() {
      const message = document.getElementById("message-input").value.trim();
      if (message === "") return;
      db.collection("chats").doc(currentChatCode).collection("messages").add({
        sender: userName,
        text: message,
        timestamp: firebase.firestore.FieldValue.serverTimestamp()
      })
      .then(() => {
        document.getElementById("message-input").value = "";
      })
      .catch((error) => {
        document.getElementById("error-message").style.display = "block";
      });
    }

    // Leave Chat
    function leaveChat() {
      document.getElementById("chat-container").style.display = "none";
      document.getElementById("chat-code-container").style.display = "block";
      loadPublicChats();
    }

    // Load Public Chats
    function loadPublicChats() {
      document.getElementById("loading").style.display = "block";
      db.collection("chats").onSnapshot(snapshot => {
        let chatsHtml = "";
        snapshot.forEach(doc => {
          chatsHtml += `<p><a href="#" onclick="joinChat('${doc.id}')">${doc.id}</a></p>`;
        });
        document.getElementById("public-chats").innerHTML = chatsHtml;
        document.getElementById("loading").style.display = "none";
      });
    }
  </script>
</body>
</html>
